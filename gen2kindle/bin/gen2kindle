#!/usr/bin/env python

import get_libgen_data
from tqdm import tqdm
import math
import kindle_mail
import requests
import html5lib
import sys
import html5lib
from bs4 import BeautifulSoup
import os
import subprocess

search = ""

def check_emailing():
	if kindle_mail.toaddr != "":
		return True
	else:
		return False


def main(search_term):
	if not search_term:
		print "Please provide a search term as argument."
	else:
		libgen_url = "http://libgen.io/search.php?req=" + search_term
		
		r = requests.get(libgen_url)
		libgen_soup = BeautifulSoup(r.content, "html5lib")
			
		#Dictionary data from Libgen based on search
		libgen_data = get_libgen_data.get_libgen_data(libgen_soup)
		
		print "\n"
		for x in libgen_data:
			author = libgen_data[x]["author"]
			title = libgen_data[x]["title"]
			extension = libgen_data[x]["extension"]
			num_pages = libgen_data[x]["num_pages"]
			year_published = libgen_data[x]["year_published"]
			extension = libgen_data[x]["extension"]
			size = libgen_data[x]["size"]
		
			print "[%d] %s - %s [%s pages (%s)] - %s %s \n" % (x, title, author, num_pages, year_published, size, extension) + "\n"
		

		new_search = raw_input("Search again or [Enter] to continue: ")

		try:
			if isinstance(int(new_search), int):
				print "Wrong input \n"
				new_search = raw_input("Search again or [Enter] to continue: ")
		except ValueError:
			new_search = new_search

		if new_search != "":
			search_term = ''.join(new_search)
			main(search_term)
		else:
			print "Please enter the index of the book you want or press any other key to search again"

			index_selection = raw_input("Index > ")
			
			try:
				selection = int(index_selection)
			except ValueError:
				print "Wrong input \n"
				print "You had to provide the index of the book."
				return None			
		

			print "\nDownloading book..."
		
			request_book = requests.get(get_libgen_data.get_download_url(libgen_data[selection]["download_link"]), stream=True)
			total_size = int(request_book.headers.get('content-length', 0)); 

		
			print "Saving Book..."
			book_name = libgen_data[selection]["title"] + "." + libgen_data[selection]["extension"]
			path = "./" + book_name
			output_name = libgen_data[selection]["title"] + ".mobi"
		
			output_path = "./" + output_name

			with open(book_name, 'wb') as handle:
				for block in tqdm(request_book.iter_content(4096), total=math.ceil(total_size//4096) , unit='KB', unit_scale=True):
					handle.write(block)
			
			send_mail = raw_input("Do you wish upload to your kindle? (y/n) :> ")
			
			#downloaded file extension
			extension = os.path.splitext(book_name)[1]
			
			def convert_and_send_mobi():
				print "Converting to mobi"
				cmd = 'kindlegen'
				process = subprocess.Popen([cmd, path])
				process.wait()

				if check_emailing() == True:
					kindle_mail.send_to_kindle(output_name, output_path, None)
					print "File sent to kindle, please give it some time to appear"
				else:
					print "\n"
					print "Mailing not configured. Find kindle_mail.py using: \n -- 'which kindle_mail.py' then open the file and edit email settings with your fav editor \n"

				
			
			if send_mail == "y":
				if extension == '.pdf':
					if check_emailing() == True:
						kindle_mail.send_to_kindle('Convert', path, libgen_data[selection]["title"])
						print "PDF converted and sent to your kindle, please give it some time to appear since its converted on amazon's end."
					else:
						print "\n"
						print "Mailing not configured. Find kindle_mail.py using: \n -- 'which kindle_mail.py' then open the file and edit email settings with your fav editor \n"

				elif extension == '.epub':
					convert_and_send_mobi()
				else:
					if check_emailing() == True:
						kindle_mail.send_to_kindle(book_name, output_path, None)
						print "Sent to your kindle, please give it some time to appear"
					else:
						print "\n"
						print "Mailing not configured. Find kindle_mail.py using: \n -- 'which kindle_mail.py' then open the file and edit email settings with your fav editor \n"
						
			else:
				print "Book saved."
	
			search_again = raw_input("Enter 'exit' or search again: ")
	
			if search_again != "exit":
				main(search_again)
			else:
				return None



if __name__ == '__main__':
	search_term = ' '.join(sys.argv[1:])
	main(search_term)
